/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield
 *
 * This library is open source and may be redistributed and/or modified under
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_ENDIAN
#define OSG_ENDIAN 1

#include <algorithm>

#if defined(_MSC_VER)

# include <cstdlib>
# define BSWAP16(x) _byteswap_ushort(x)
# define BSWAP32(x) _byteswap_ulong(x)
# define BSWAP64(x) _byteswap_uint64(x)

//  GCC and Clang recent versions provide intrinsic byte swaps via builtins
#elif defined(__clang__)
#if (__has_builtin(__builtin_bswap32) && __has_builtin(__builtin_bswap64))
#define BSWAP32(x) __builtin_bswap32(x)
#define BSWAP64(x) __builtin_bswap64(x)
#endif
#if __has_builtin(__builtin_bswap16)
#define BSWAP16(x) __builtin_bswap16(x)
# else
#define BSWAP16(x) __builtin_bswap32((x) << 16)
#endif

#elif (defined(__GNUC__ ) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3)))
// prior to 4.8, gcc did not provide __builtin_bswap16 on some platforms so we emulate it
// see http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52624
#if (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8))
#define BSWAP16(x) __builtin_bswap16(x)
#else
#define BSWAP16(x) __builtin_bswap32((x) << 16)
#endif
#define BSWAP32(x) __builtin_bswap32(x)
#define BSWAP64(x) __builtin_bswap64(x)

#endif

#if defined(BSWAP16)
#include <osg/Types>
#endif

//  Linux systems provide the byteswap.h header, with
#if (!defined(BSWAP16) && defined(__linux__))
//  don't check for obsolete forms defined(linux) and defined(__linux) on the theory that
//  compilers that predefine only these are so old that byteswap.h probably isn't present.
# include <byteswap.h>
#define BSWAP16(x) bswap_16(x)
#define BSWAP32(x) bswap_32(x)
#define BSWAP64(x) bswap_64(x)

#endif

namespace osg {

enum Endian
{
    BigEndian,
    LittleEndian
};

inline Endian getCpuByteOrder()
{
    union {
        char big_endian_1[2];
        short is_it_really_1;
    } u;
    u.big_endian_1[0] = 0;
    u.big_endian_1[1] = 1;

    if (u.is_it_really_1 == 1)
        return BigEndian;
    else
        return LittleEndian;
}

inline void swapBytes( char* in, unsigned int size )
{
    char* start = in;
    char* end = start+size-1;
    while (start<end)
    {
        std::swap(*start++,*end--);
    }
}

inline void swapBytes2( char* in )
{
#ifdef BSWAP16
    *((uint16_t*)in) = BSWAP16(*((uint16_t*)in));
#else
    std::swap(in[0],in[1]);
#endif
}

inline void swapBytes4( char* in )
{
#ifdef BSWAP32
    *((uint32_t*)in) = BSWAP32(*((uint32_t*)in));
#else
    std::swap(in[0],in[3]);
    std::swap(in[1],in[2]);
#endif
}

inline void swapBytes8( char* in )
{
#ifdef BSWAP64
    *((uint64_t*)in) = BSWAP64(*((uint64_t*)in));
#else
    std::swap(in[0],in[7]);
    std::swap(in[1],in[6]);
    std::swap(in[2],in[5]);
    std::swap(in[3],in[4]);
#endif
}

inline void swapBytes16( char* in )
{
    std::swap(in[0],in[15]);
    std::swap(in[1],in[14]);
    std::swap(in[2],in[13]);
    std::swap(in[3],in[12]);
    std::swap(in[4],in[11]);
    std::swap(in[5],in[10]);
    std::swap(in[6],in[9]);
    std::swap(in[7],in[8]);
}

template<typename T>
void swapBytes(T& t) { swapBytes(reinterpret_cast<char*>(&t), sizeof(T)); }

}

#endif
